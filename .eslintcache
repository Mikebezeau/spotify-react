[{"C:\\Program Files\\nodejs\\spotify-react\\src\\index.js":"1","C:\\Program Files\\nodejs\\spotify-react\\src\\App.js":"2","C:\\Program Files\\nodejs\\spotify-react\\src\\reportWebVitals.js":"3","C:\\Program Files\\nodejs\\spotify-react\\src\\components\\Nav.js":"4","C:\\Program Files\\nodejs\\spotify-react\\src\\components\\MusicControls.js":"5","C:\\Program Files\\nodejs\\spotify-react\\src\\components\\Main.js":"6","C:\\Program Files\\nodejs\\spotify-react\\src\\spotify\\Credentials.js":"7","C:\\Program Files\\nodejs\\spotify-react\\src\\components\\Slider.js":"8","C:\\Program Files\\nodejs\\spotify-react\\src\\utility\\SliderBase.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":2797,"mtime":1611209552913,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":2399,"mtime":1611184412920,"results":"14","hashOfConfig":"11"},{"size":224,"mtime":1611184506344,"results":"15","hashOfConfig":"11"},{"size":2864,"mtime":1611209980916,"results":"16","hashOfConfig":"11"},{"size":193,"mtime":1611176502901,"results":"17","hashOfConfig":"11"},{"size":4174,"mtime":1611209524033,"results":"18","hashOfConfig":"11"},{"size":2689,"mtime":1611209498336,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"13qw0x1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Program Files\\nodejs\\spotify-react\\src\\index.js",[],["41","42"],"C:\\Program Files\\nodejs\\spotify-react\\src\\App.js",["43"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { Credentials } from './spotify/Credentials';\r\nimport Nav from './components/Nav';\r\nimport Main from './components/Main';\r\nimport MusicControls from './components/MusicControls';\r\n\r\nfunction App() {\r\n  \r\n    const spotify = Credentials();\r\n    const [token, setToken] = useState('');\r\n    const [genres, setGenres] = useState({selectedGenre:'', listOfGenresFromAPI: []});\r\n    const [playlists, setPlaylists] = useState({selectedPlaylist:'', listOfPlaylistsFromAPI: []});\r\n    \r\n    useEffect(() => {\r\n\r\n      axios('https://accounts.spotify.com/api/token', {\r\n        headers: {\r\n          'Content-Type' : 'application/x-www-form-urlencoded',\r\n          'Authorization' : 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)      \r\n        },\r\n        data: 'grant_type=client_credentials',\r\n        method: 'POST'\r\n      })\r\n      .then(tokenResponse => {      \r\n        setToken(tokenResponse.data.access_token);\r\n  \r\n        axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\r\n          method: 'GET',\r\n          headers: { 'Authorization' : 'Bearer ' + tokenResponse.data.access_token}\r\n        })\r\n        .then (genreResponse => {  \r\n          console.log('genreResponse');\r\n          setGenres({\r\n            selectedGenre: genres.selectedGenre,\r\n            listOfGenresFromAPI: genreResponse.data.categories.items\r\n          })\r\n        });\r\n        \r\n      });\r\n  \r\n    //}, [genres.selectedGenre, spotify.ClientId, spotify.ClientSecret]);\r\n    }, [spotify.ClientId, spotify.ClientSecret]);\r\n  \r\n    const genreChanged = val => {\r\n      console.log('genreChanged');\r\n      setGenres({\r\n        selectedGenre: val,\r\n        listOfGenresFromAPI: genres.listOfGenresFromAPI\r\n      });\r\n      \r\n      axios(`https://api.spotify.com/v1/browse/categories/${val}/playlists?limit=10`, {\r\n        method: 'GET',\r\n        headers: { 'Authorization' : 'Bearer ' + token}\r\n      })\r\n      .then (playlistResponse => {  \r\n        //console.log(playlistResponse.data.playlists.items);\r\n        setPlaylists({\r\n          selectedPlaylist: playlists.selectedPlaylist,\r\n          listOfPlaylistsFromAPI: playlistResponse.data.playlists.items\r\n        })\r\n\r\n      });\r\n    }\r\n\r\n    const playlistChanged = val => {\r\n      console.log('setPlaylists');\r\n      setPlaylists({\r\n        selectedPlaylists: val,\r\n        listOfPlaylistsFromAPI: playlists.listOfPlaylistsFromAPI\r\n      });\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"outerWQrap\">\r\n      <div className=\"App\">\r\n        <Nav/>\r\n        <Main genres={genres} playlists={playlists} genreChanged={genreChanged} playlistChanged={playlistChanged}/>\r\n      </div>\r\n      <MusicControls/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Program Files\\nodejs\\spotify-react\\src\\reportWebVitals.js",[],"C:\\Program Files\\nodejs\\spotify-react\\src\\components\\Nav.js",[],"C:\\Program Files\\nodejs\\spotify-react\\src\\components\\MusicControls.js",[],"C:\\Program Files\\nodejs\\spotify-react\\src\\components\\Main.js",["44","45"],"import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GenreSlider, PlaylistSlider } from './Slider';\r\n\r\nimport '../sass/AppMain.scss';\r\n\r\nconst Main = props => {\r\n\r\n    const genreDropDownChanged = e => {\r\n        props.genreChanged(e.target.value);\r\n    }\r\n\r\n    const genreCardClicked = val => {\r\n        //console.log(val);\r\n        props.genreChanged(val);\r\n    }\r\n\r\n    const playlistDropDownChanged = e => {\r\n        props.playlistChanged(e.target.value);\r\n    }\r\n   \r\n    const playlistCardClicked = val => {\r\n        //console.log(val);\r\n        props.playlistChanged(val);\r\n    }\r\n\r\n    //render genre slider once data fetched\r\n    //still calling at start while props.genres.listOfGenresFromAPI.length == 0\r\n    useEffect(() => {\r\n        console.log('make slider')\r\n        //if(props.genres.listOfGenresFromAPI.length){\r\n            //prev and next buttons always enabled now so that wont matter if refreshed, will still be able to scroll\r\n            ReactDOM.render(<GenreSlider genres={props.genres} click={genreCardClicked} />, document.getElementById(\"genreSliderContainer\"));\r\n        //}\r\n      }, [props.genres.listOfGenresFromAPI]);\r\n  \r\n      useEffect(() => {\r\n        ReactDOM.render(<PlaylistSlider playlists={props.playlists} click={playlistCardClicked} />, document.getElementById(\"playlistSliderContainer\"));\r\n        if(props.playlists.listOfPlaylistsFromAPI.length){\r\n            document.getElementById(\"playlistContainer\").style.display = 'block';\r\n        }\r\n      }, [props.playlists.listOfPlaylistsFromAPI]);\r\n  \r\n    return (\r\n    <div className=\"main\">\r\n        <div className=\"upper\">\r\n            <form onSubmit={() => {}}>\r\n                <select value={props.genres.selectedValue} onChange={genreDropDownChanged}>\r\n                { \r\n                    props.genres.listOfGenresFromAPI.map(\r\n                        (item,index) => \r\n                        <option key={index} value={item.id}>{item.name}</option>\r\n                    )\r\n                }\r\n                </select>\r\n                \r\n                <select value={props.playlists.selectedValue} onChange={playlistDropDownChanged}>\r\n                { \r\n                    props.playlists.listOfPlaylistsFromAPI.map(\r\n                        (item,index) => \r\n                        <option key={index} value={item.id}>{item.name}</option>\r\n                    )\r\n                }\r\n                </select>\r\n            </form>\r\n        </div>\r\n\r\n        <div className=\"mainContent\">\r\n            <h1>Genres</h1>\r\n            <div id=\"genreSliderContainer\">\r\n            </div>\r\n            <div id=\"playlistContainer\">\r\n                <h1>Playlists</h1>\r\n                <div id=\"playlistSliderContainer\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","C:\\Program Files\\nodejs\\spotify-react\\src\\spotify\\Credentials.js",[],"C:\\Program Files\\nodejs\\spotify-react\\src\\components\\Slider.js",[],"C:\\Program Files\\nodejs\\spotify-react\\src\\utility\\SliderBase.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":44,"column":8,"nodeType":"52","endLine":44,"endColumn":48,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":35,"column":10,"nodeType":"52","endLine":35,"endColumn":44,"suggestions":"55"},{"ruleId":"50","severity":1,"message":"56","line":42,"column":10,"nodeType":"52","endLine":42,"endColumn":50,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'genres.selectedGenre'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setGenres' needs the current value of 'genres.selectedGenre'.","ArrayExpression",["60"],"React Hook useEffect has missing dependencies: 'genreCardClicked' and 'props.genres'. Either include them or remove the dependency array.",["61"],"React Hook useEffect has missing dependencies: 'playlistCardClicked' and 'props.playlists'. Either include them or remove the dependency array.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [genres.selectedGenre, spotify.ClientId, spotify.ClientSecret]",{"range":"69","text":"70"},"Update the dependencies array to be: [genreCardClicked, props.genres, props.genres.listOfGenresFromAPI]",{"range":"71","text":"72"},"Update the dependencies array to be: [playlistCardClicked, props.playlists, props.playlists.listOfPlaylistsFromAPI]",{"range":"73","text":"74"},[1578,1618],"[genres.selectedGenre, spotify.ClientId, spotify.ClientSecret]",[1150,1184],"[genreCardClicked, props.genres, props.genres.listOfGenresFromAPI]",[1534,1574],"[playlistCardClicked, props.playlists, props.playlists.listOfPlaylistsFromAPI]"]